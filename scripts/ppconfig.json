{"name":"DNAweb","url":"https://dnaslm.fun/","showName":"DNAweb","appid":"fun.DNAweb.app","icon":"","iconRound":true,"state":true,"single":true,"injectJq":true,"tauriApi":false,"devbug":false,"version":"1.0.0","preview":"desktop","platform":["1-1","1-2","2-1","2-2","3-1","3-2"],"width":800,"height":600,"desc":"","jsFile":[],"filterCss":"","customJs":"console.log(\n    '%cbuild from PakePlus： https://github.com/Sjj1024/PakePlus',\n    'color:orangered;font-weight:bolder'\n)\n\n// 文件上传和下载增强脚本\n// Enhanced script for file upload and download functionality\n\n// 检测是否为文件下载链接\nconst isDownloadLink = (url, element) => {\n    if (!url) return false;\n    \n    // 检查下载属性\n    if (element && element.hasAttribute('download')) {\n        return true;\n    }\n    \n    // 检查文件扩展名\n    const downloadExtensions = [\n        '.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx',\n        '.zip', '.rar', '.7z', '.tar', '.gz',\n        '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp', '.svg',\n        '.mp3', '.mp4', '.avi', '.mov', '.wmv', '.flv',\n        '.txt', '.rtf', '.csv', '.json', '.xml',\n        '.apk', '.exe', '.dmg', '.deb', '.rpm'\n    ];\n    \n    const urlLower = url.toLowerCase();\n    const hasDownloadExtension = downloadExtensions.some(ext => \n        urlLower.includes(ext)\n    );\n    \n    // 检查URL中是否包含download参数或download关键词\n    const hasDownloadParam = urlLower.includes('download') || \n                             urlLower.includes('attachment') ||\n                             urlLower.includes('export');\n    \n    // 检查Content-Disposition或其他下载相关的URL模式\n    const hasDownloadPattern = /\\/download\\/|\\/export\\/|\\/attachment\\/|\\/file\\//i.test(url);\n    \n    return hasDownloadExtension || hasDownloadParam || hasDownloadPattern;\n}\n\n// 处理文件下载\nconst handleDownload = async (url, filename) => {\n    try {\n        console.log('开始处理文件下载:', url);\n        \n        // 方法1: 尝试创建隐藏的iframe来处理下载\n        const iframe = document.createElement('iframe');\n        iframe.style.display = 'none';\n        iframe.src = url;\n        document.body.appendChild(iframe);\n        \n        // 清理iframe\n        setTimeout(() => {\n            if (iframe.parentNode) {\n                iframe.parentNode.removeChild(iframe);\n            }\n        }, 5000);\n        \n        // 方法2: 如果支持，尝试使用fetch + blob下载\n        if (window.fetch) {\n            try {\n                const response = await fetch(url);\n                if (response.ok) {\n                    const blob = await response.blob();\n                    const downloadUrl = window.URL.createObjectURL(blob);\n                    \n                    const a = document.createElement('a');\n                    a.href = downloadUrl;\n                    a.download = filename || 'download';\n                    a.style.display = 'none';\n                    document.body.appendChild(a);\n                    a.click();\n                    document.body.removeChild(a);\n                    \n                    // 清理blob URL\n                    setTimeout(() => {\n                        window.URL.revokeObjectURL(downloadUrl);\n                    }, 1000);\n                    \n                    console.log('文件下载成功:', filename);\n                    return true;\n                }\n            } catch (fetchError) {\n                console.log('fetch下载失败，使用备用方法:', fetchError.message);\n            }\n        }\n        \n        // 方法3: 尝试直接跳转下载\n        window.location.href = url;\n        \n    } catch (error) {\n        console.error('下载处理失败:', error);\n        // 最后的备用方案：直接跳转\n        window.location.href = url;\n    }\n}\n\n// 创建文件选择器\nconst createFileSelector = (accept, multiple = false) => {\n    return new Promise((resolve, reject) => {\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.accept = accept || '*/*';\n        input.multiple = multiple;\n        input.style.display = 'none';\n        \n        input.onchange = (e) => {\n            const files = Array.from(e.target.files);\n            document.body.removeChild(input);\n            resolve(files);\n        };\n        \n        input.oncancel = () => {\n            document.body.removeChild(input);\n            resolve([]);\n        };\n        \n        // 添加超时处理\n        setTimeout(() => {\n            if (input.parentNode) {\n                document.body.removeChild(input);\n                reject(new Error('文件选择超时'));\n            }\n        }, 60000); // 60秒超时\n        \n        document.body.appendChild(input);\n        input.click();\n    });\n};\n\n// 处理文件上传\nconst handleFileUpload = async (uploadUrl, files, additionalData = {}) => {\n    if (!files || files.length === 0) {\n        console.log('没有选择文件');\n        return;\n    }\n    \n    try {\n        console.log('开始上传文件:', files.map(f => f.name));\n        \n        const formData = new FormData();\n        \n        // 添加文件\n        if (files.length === 1) {\n            formData.append('file', files[0]);\n        } else {\n            files.forEach((file, index) => {\n                formData.append(`file${index}`, file);\n            });\n        }\n        \n        // 添加额外数据\n        Object.keys(additionalData).forEach(key => {\n            formData.append(key, additionalData[key]);\n        });\n        \n        // 发送上传请求\n        const response = await fetch(uploadUrl, {\n            method: 'POST',\n            body: formData\n        });\n        \n        if (response.ok) {\n            const result = await response.json();\n            console.log('文件上传成功:', result);\n            \n            // 触发页面刷新或更新\n            if (typeof window.location.reload === 'function') {\n                window.location.reload();\n            }\n            \n            return result;\n        } else {\n            throw new Error(`上传失败: ${response.status} ${response.statusText}`);\n        }\n        \n    } catch (error) {\n        console.error('文件上传失败:', error);\n        alert(`文件上传失败: ${error.message}`);\n        throw error;\n    }\n};\n\n// 检测是否为文件上传相关元素\nconst isUploadElement = (element) => {\n    if (!element) return false;\n    \n    // 检查input[type=\"file\"]\n    if (element.tagName === 'INPUT' && element.type === 'file') {\n        return true;\n    }\n    \n    // 检查是否为上传按钮\n    const uploadKeywords = ['上传', 'upload', '选择文件', 'choose file', 'browse', '添加文件'];\n    const text = (element.textContent || element.value || '').toLowerCase();\n    const className = (element.className || '').toLowerCase();\n    const id = (element.id || '').toLowerCase();\n    \n    return uploadKeywords.some(keyword => \n        text.includes(keyword.toLowerCase()) ||\n        className.includes(keyword.toLowerCase()) ||\n        id.includes(keyword.toLowerCase())\n    );\n};\n\n// 查找上传URL\nconst findUploadUrl = (element) => {\n    // 查找最近的form元素\n    const form = element.closest('form');\n    if (form && form.action) {\n        return form.action;\n    }\n    \n    // 查找data属性\n    const uploadUrl = element.getAttribute('data-upload-url') ||\n                     element.getAttribute('data-url') ||\n                     element.getAttribute('data-action');\n    \n    if (uploadUrl) {\n        return uploadUrl;\n    }\n    \n    // 根据当前路径推测上传URL\n    const currentPath = window.location.pathname;\n    if (currentPath.includes('cloud')) {\n        return '/api/cloud/upload';\n    } else if (currentPath.includes('homework')) {\n        return '/api/homework/upload';\n    }\n    \n    return '/api/upload'; // 默认上传URL\n};\n\n// 主要的点击处理函数\nconst hookClick = async (e) => {\n    const target = e.target;\n    const origin = target.closest('a');\n    const isBaseTargetBlank = document.querySelector('head base[target=\"_blank\"]');\n    \n    console.log('点击检测:', target, origin, isBaseTargetBlank);\n    \n    // 处理文件上传相关点击\n    if (isUploadElement(target)) {\n        console.log('检测到上传元素点击:', target);\n        \n        // 如果是input[type=\"file\"]，让其正常工作\n        if (target.tagName === 'INPUT' && target.type === 'file') {\n            console.log('文件输入框，正常处理');\n            return;\n        }\n        \n        // 如果是上传按钮，触发文件选择\n        e.preventDefault();\n        e.stopPropagation();\n        \n        try {\n            const accept = target.getAttribute('accept') || \n                          target.getAttribute('data-accept') || '*/*';\n            const multiple = target.hasAttribute('multiple') || \n                           target.hasAttribute('data-multiple');\n            \n            const files = await createFileSelector(accept, multiple);\n            \n            if (files.length > 0) {\n                const uploadUrl = findUploadUrl(target);\n                \n                // 获取额外数据\n                const additionalData = {};\n                const path = target.getAttribute('data-path');\n                if (path) additionalData.path = path;\n                \n                await handleFileUpload(uploadUrl, files, additionalData);\n            }\n        } catch (error) {\n            console.error('处理文件上传失败:', error);\n        }\n        \n        return;\n    }\n    \n    // 处理下载链接\n    if (origin && origin.href && isDownloadLink(origin.href, origin)) {\n        console.log('检测到下载链接:', origin.href);\n        e.preventDefault();\n        e.stopPropagation();\n        \n        // 获取文件名\n        let filename = origin.download || origin.getAttribute('data-filename');\n        if (!filename) {\n            const urlParts = origin.href.split('/');\n            filename = urlParts[urlParts.length - 1] || 'download';\n        }\n        \n        await handleDownload(origin.href, filename);\n        return;\n    }\n    \n    // 处理普通的_blank链接\n    if (origin && origin.href && \n        ((origin.target === '_blank') || isBaseTargetBlank)) {\n        e.preventDefault();\n        console.log('处理_blank链接:', origin.href);\n        location.href = origin.href;\n    } else {\n        console.log('普通点击，不处理');\n    }\n};\n\n// 处理拖拽上传\nconst handleDragAndDrop = () => {\n    let dragCounter = 0;\n    \n    const handleDragEnter = (e) => {\n        e.preventDefault();\n        dragCounter++;\n        console.log('拖拽进入页面');\n    };\n    \n    const handleDragOver = (e) => {\n        e.preventDefault();\n        e.dataTransfer.dropEffect = 'copy';\n    };\n    \n    const handleDragLeave = (e) => {\n        e.preventDefault();\n        dragCounter--;\n        if (dragCounter === 0) {\n            console.log('拖拽离开页面');\n        }\n    };\n    \n    const handleDrop = async (e) => {\n        e.preventDefault();\n        dragCounter = 0;\n        \n        const files = Array.from(e.dataTransfer.files);\n        if (files.length === 0) return;\n        \n        console.log('检测到拖拽文件:', files.map(f => f.name));\n        \n        // 确认是否上传\n        const confirmUpload = confirm(`确定要上传 ${files.length} 个文件吗？`);\n        if (!confirmUpload) return;\n        \n        try {\n            // 根据当前页面确定上传URL\n            let uploadUrl = '/api/upload';\n            const currentPath = window.location.pathname;\n            \n            if (currentPath.includes('cloud')) {\n                uploadUrl = '/api/cloud/upload';\n            } else if (currentPath.includes('homework')) {\n                uploadUrl = '/api/homework/upload';\n            }\n            \n            await handleFileUpload(uploadUrl, files);\n        } catch (error) {\n            console.error('拖拽上传失败:', error);\n        }\n    };\n    \n    // 添加拖拽事件监听\n    document.addEventListener('dragenter', handleDragEnter);\n    document.addEventListener('dragover', handleDragOver);\n    document.addEventListener('dragleave', handleDragLeave);\n    document.addEventListener('drop', handleDrop);\n    \n    console.log('拖拽上传功能已启用');\n};\n\n// 增强文件输入框\nconst enhanceFileInputs = () => {\n    const fileInputs = document.querySelectorAll('input[type=\"file\"]');\n    \n    fileInputs.forEach(input => {\n        // 移除已有的事件监听器（如果有的话）\n        const newInput = input.cloneNode(true);\n        input.parentNode.replaceChild(newInput, input);\n        \n        // 添加增强的change事件\n        newInput.addEventListener('change', async (e) => {\n            const files = Array.from(e.target.files);\n            if (files.length === 0) return;\n            \n            console.log('文件输入框选择文件:', files.map(f => f.name));\n            \n            // 查找对应的上传URL\n            const uploadUrl = findUploadUrl(newInput);\n            \n            // 获取额外数据\n            const additionalData = {};\n            const form = newInput.closest('form');\n            if (form) {\n                const formData = new FormData(form);\n                for (let [key, value] of formData.entries()) {\n                    if (key !== newInput.name) {\n                        additionalData[key] = value;\n                    }\n                }\n            }\n            \n            try {\n                await handleFileUpload(uploadUrl, files, additionalData);\n            } catch (error) {\n                console.error('文件上传失败:', error);\n            }\n        });\n    });\n    \n    console.log(`增强了 ${fileInputs.length} 个文件输入框`);\n};\n\n// 处理动态添加的元素\nconst observer = new MutationObserver((mutations) => {\n    mutations.forEach((mutation) => {\n        mutation.addedNodes.forEach((node) => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n                // 检查新添加的下载链接\n                const links = node.querySelectorAll ? node.querySelectorAll('a[href]') : [];\n                links.forEach(link => {\n                    if (isDownloadLink(link.href, link)) {\n                        console.log('发现新的下载链接:', link.href);\n                    }\n                });\n                \n                // 检查新添加的文件输入框\n                const fileInputs = node.querySelectorAll ? node.querySelectorAll('input[type=\"file\"]') : [];\n                if (fileInputs.length > 0) {\n                    console.log('发现新的文件输入框，进行增强');\n                    enhanceFileInputs();\n                }\n            }\n        });\n    });\n});\n\n// 初始化函数\nconst initialize = () => {\n    // 注册事件监听器\n    document.addEventListener('click', hookClick, { capture: true });\n    \n    // 启用拖拽上传\n    handleDragAndDrop();\n    \n    // 增强现有的文件输入框\n    enhanceFileInputs();\n    \n    // 开始观察DOM变化\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n    \n    console.log('PakePlus文件上传下载增强脚本已加载');\n    \n    // 添加全局函数供其他脚本调用\n    window.pakeDownload = handleDownload;\n    window.pakeUpload = handleFileUpload;\n    window.pakeCreateFileSelector = createFileSelector;\n};\n\n// 确保DOM准备就绪后初始化\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initialize);\n} else {\n    initialize();\n}","isHtml":false,"htmlPath":"","htmlFiles":[],"more":{"windows":{"label":"DNAweb","title":"DNAweb","url":"https://dnaslm.fun/","userAgent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36","width":800,"height":600,"theme":null,"resizable":true,"fullscreen":false,"maximized":false,"minWidth":400,"minHeight":300,"maxWidth":1920,"maxHeight":1080,"decorations":true,"transparent":false,"titleBarStyle":"Visible","visible":true,"focus":true,"closable":true,"minimizable":true,"maximizable":true,"alwaysOnTop":false,"alwaysOnBottom":false,"center":false,"skipTaskbar":false,"tabbingIdentifier":null,"parent":null,"dragDropEnabled":true,"browserExtensionsEnabled":false,"devtools":true,"contentProtected":false,"hiddenTitle":false,"incognito":false,"proxyUrl":null,"useHttpsScheme":false,"zoomHotkeysEnabled":false,"acceptFirstMouse":false,"create":false}},"phone":{"safeArea":{"top":0,"bottom":0,"left":0,"right":0},"header":{"show":false,"title":"","backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","loading":false,"toolBar":false,"toolBarBackgroundColor":"","toolBarColor":"","toolBarFontSize":16,"toolBarFontWeight":"bold"},"siderMenu":{"show":false,"width":0,"backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","title":"","titleColor":"","titleFontSize":16,"titleFontWeight":"bold"},"tabBar":{"show":false,"backgroundColor":"","color":"","activeColor":"","fontSize":16,"fontWeight":"bold","tabBarItem":[]},"webview":{"userAgent":"","javaScriptEnabled":true,"domStorageEnabled":true,"allowFileAccess":true,"loadWithOverviewMode":true,"setSupportZoom":true,"clearCache":true}},"ios":{"name":"DNAweb","showName":"DNAweb","version":"1.0.0","webUrl":"https://dnaslm.fun/","id":"fun.DNAweb.app.ios","icon":"./app-icon.png","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿用于传播或商业用途）","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿用于传播或商业用途）","isHtml":false,"debug":false},"android":{"name":"DNAweb","showName":"DNAweb","version":"1.0.0","webUrl":"https://dnaslm.fun/","id":"fun.DNAweb.app.android","icon":"./app-icon.png","input":"./app-icon.png","output":"./res","rounded":true,"copyTo":"./app/src/main/res","androidResDir":"./app/src/main/res","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿用于传播或商业用途）","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿用于传播或商业用途）","isHtml":false,"debug":false},"desktop":{"name":"DNAweb","showName":"DNAweb","version":"1.0.0","id":"fun.DNAweb.app.desktop","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿用于传播或商业用途，否则后果自负）","webUrl":"https://dnaslm.fun/","iconPath":"../app-icon.png","inputPath":"../app-icon.png","tempPath":"./processed-image.png","icnsPath":"../src-tauri/icons/icon.icns","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿用于传播或商业用途，否则后果自负）","isHtml":false,"single":true,"state":true,"injectJq":false,"tauriApi":false,"debug":false}}